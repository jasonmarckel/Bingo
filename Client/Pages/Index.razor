@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IAsyncDisposable

<style type="text/css">
    #BingoCard
    {
        width: 100%;
    }
    #BingoCard td 
    {
        border: 3px solid black;
        width: 20%;
        text-align: center;
        font-weight: bold;
        padding-bottom: 5%;
        padding-top: 5%;
    }
    #BingoCard thead td
    {
        font-size: x-large;
        font-weight: 900;
    }
    .DefaultStamp
    {
        background-color: yellow;
    }
</style>

<div class="form-group">
    <label>
        Name: 
        <input type="text" class="form-control" @bind="playerName" placeholder="player name" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<div>
    <button type="button" @onclick="GenerateNewCard" class="btn btn-outline-secondary btn-sm">New Card</button>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<br/>

<table id="BingoCard">
    <thead>
        <tr>
            <td>B</td>
            <td>I</td>
            <td>N</td>
            <td>G</td>
            <td>O</td>
        </tr>
    </thead>
    @for (int r = 0; r < 5; r++)
    {
        <tr>
        @for (int c = 0; c < 5; c++)
        {
            var row = r;
            var col = c;            
            <td @onclick="eventargs => StampSquare(eventargs, row, col, card.StampClass)" class="@card.Squares[r,c].StampClass">@card.Squares[r,c].Value</td>
        }
        </tr>
    }
</table>

@code {
    private Card card;

     private string playerName { get; set; } = string.Empty;

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;

    public class Card
    {
        public string StampClass { get; set; }
        public Square[,] Squares { get; set; } = new Square[5,5];

        public Card()
        {
            StampClass = "DefaultStamp";    
            GenerateNewCard();
        }

        public void GenerateNewCard()
        {
            var rnd = new Random();
            var uniqueValues = new HashSet<int>();

            // generate a set of 5 unique integers for each column
            for (int c = 0; c < 5; c++)
            {
                // determine the low and high numbers for the column
                int minValue = 1 + (c * 15);
                int maxValue = 15 + (c * 15);
                // initialize the HashSet for the column to hold the uniqe values
                uniqueValues.Clear();
                // generate random numbers until we have 5 unique numbers for the column
                while (uniqueValues.Count < 5)
                {
                    // generate a random number
                    int x  = rnd.Next(minValue, maxValue);
                    // the number will only be added to the HashSet if it
                    // does not already exist in the HashSet
                    uniqueValues.Add(x);
                }
                // copy the unique values for the column to the card
                for (int r = 0; r < 5; r++)
                {
                    Squares[r,c] = new Square() { Value = uniqueValues.ElementAt(r).ToString() };
                    if (c == 2 && r == 2)
                    {
                        Squares[r,c].Value = "FREE";
                        Squares[r,c].StampClass = StampClass;
                    }
                }
            }
        }

        public class Square
        {
            public string Value { get; set; }
            public bool IsStamped { get { return !string.IsNullOrWhiteSpace(StampClass); } }
            public string StampClass { get; set; }
        }

    }

    protected override async Task OnInitializedAsync()
    {        
        card = new Card();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/callerhub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        try
        {
            playerName = await localStorage.GetItemAsync<string>("playerName");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", playerName, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
        
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private void StampSquare(MouseEventArgs e, int row, int col, string stampClass)
    {
        if (row == 2 && col == 2) { return; }
        var square = card.Squares[row, col];
        square.StampClass = square.IsStamped ? string.Empty : card.StampClass;
    }
    private void GenerateNewCard()
    {
        localStorage.SetItemAsync("playerName", playerName);

        card.GenerateNewCard();
    }
}